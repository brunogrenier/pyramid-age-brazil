{"ast":null,"code":"var _jsxFileName = \"C:\\\\piramideEtariaBrasil\\\\src\\\\PopulationPyramidChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\n\n// Declare additional properties on the global window object for JSCharting\n\n// Define interfaces for data points and component props\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Define the PopulationPyramidChart component\nconst PopulationPyramidChart = ({\n  width = '100%',\n  height = '100%',\n  apiUrl,\n  year\n}) => {\n  _s();\n  // Ref to hold reference to the chart container element\n  const chartRef = useRef(null);\n\n  // Fetch data from the provided API URL on component mount or when apiUrl changes\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch data from the provided API URL\n        const response = await fetch(apiUrl);\n\n        // Check if the response is ok\n        if (!response.ok) {\n          throw new Error('Error fetching data from IBGE API');\n        }\n\n        // Parse response data\n        const data = await response.json();\n        const processedData = data[0].resultados;\n\n        // Variables to hold data for chart\n        const maleData = [];\n        const femaleData = [];\n\n        // Determine codes for sex and age group based on selected year\n        var sexCode = 0;\n        var ageGroupCode = 0;\n        if (year === '2022') {\n          sexCode = 2;\n          ageGroupCode = 287;\n        } else if (year === '2010') {\n          sexCode = 2;\n          ageGroupCode = 58;\n        }\n\n        // Process retrieved data\n        for (let i = 0; i < processedData.length; i++) {\n          var sex = '';\n          var ageGroup = '';\n\n          // Extract sex and age group information from the data\n          for (let j = 0; j < processedData[i].classificacoes.length; j++) {\n            if (processedData[i].classificacoes[j].id == sexCode) {\n              const sexValue = processedData[i].classificacoes[j].categoria;\n              sex = Object.values(sexValue)[0];\n            }\n            if (processedData[i].classificacoes[j].id == ageGroupCode) {\n              const ageGroupValue = processedData[i].classificacoes[j].categoria;\n              ageGroup = Object.values(ageGroupValue)[0];\n            }\n          }\n\n          // Extract quantity information\n          const quantityValue = processedData[i].series[0].serie;\n          const quantityKey = Object.keys(quantityValue)[0];\n          var quantity = parseInt(quantityValue[quantityKey], 10);\n\n          // Determine if the data belongs to males or females and push to respective arrays\n          if (sex === 'Homens') {\n            maleData.push([ageGroup, -quantity]);\n          }\n          if (sex === 'Mulheres') {\n            femaleData.push([ageGroup, quantity]);\n          }\n        }\n\n        // Create data points for males and females\n        const malePoints = {\n          name: 'Male',\n          points: maleData\n        };\n        const femalePoints = {\n          name: 'Female',\n          points: femaleData\n        };\n\n        // Render chart using JSCharting library\n        if (window.JSC) {\n          renderChart(malePoints, femalePoints);\n        } else {\n          // Load JSCharting library if not already loaded\n          const script = document.createElement('script');\n          script.src = 'https://code.jscharting.com/latest/jscharting.js';\n          script.async = true;\n          script.onload = () => renderChart(malePoints, femalePoints);\n          document.head.appendChild(script);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    };\n\n    // Call fetchData function on component mount or when apiUrl changes\n    fetchData();\n  }, [apiUrl]);\n\n  // Function to render the population pyramid chart\n  const renderChart = (malePoints, femalePoints) => {\n    // Reverse data points to display correctly on the chart\n    malePoints.points.reverse();\n    femalePoints.points.reverse();\n\n    // Configuration object for the chart\n    const config = {\n      debug: true,\n      type: 'horizontal column',\n      title_label_text: '',\n      yAxis: {\n        scale_type: 'stacked',\n        defaultTick_label_text: '{Math.abs(%Value):a2}'\n      },\n      xAxis: {\n        label_text: 'Age',\n        crosshair_enabled: true\n      },\n      defaultTooltip_label_text: 'Ages %xValue:<br><b>%points</b>',\n      defaultPoint_tooltip: '%icon {Math.abs(%Value)}',\n      legend_template: '%name %icon {Math.abs(%Value)}',\n      series: [malePoints, femalePoints]\n    };\n\n    // Render the chart using JSCharting library\n    if (window.JSC && typeof window.JSC.Chart === 'function') {\n      // Check if chartRef.current is not null before calling the Chart function\n      if (chartRef.current) {\n        window.JSC.Chart(chartRef.current, config);\n      } else {\n        console.error('chartRef.current is null.');\n      }\n    } else {\n      console.error('JSCharting.Chart is either not defined or not a function.');\n    }\n  };\n\n  // Render the chart container\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chartRef,\n    style: {\n      width,\n      height\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 10\n  }, this);\n};\n\n// Export the PopulationPyramidChart component\n_s(PopulationPyramidChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = PopulationPyramidChart;\nexport default PopulationPyramidChart;\nvar _c;\n$RefreshReg$(_c, \"PopulationPyramidChart\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","PopulationPyramidChart","width","height","apiUrl","year","_s","chartRef","fetchData","response","fetch","ok","Error","data","json","processedData","resultados","maleData","femaleData","sexCode","ageGroupCode","i","length","sex","ageGroup","j","classificacoes","id","sexValue","categoria","Object","values","ageGroupValue","quantityValue","series","serie","quantityKey","keys","quantity","parseInt","push","malePoints","name","points","femalePoints","window","JSC","renderChart","script","document","createElement","src","async","onload","head","appendChild","error","console","reverse","config","debug","type","title_label_text","yAxis","scale_type","defaultTick_label_text","xAxis","label_text","crosshair_enabled","defaultTooltip_label_text","defaultPoint_tooltip","legend_template","Chart","current","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/piramideEtariaBrasil/src/PopulationPyramidChart.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\n// Declare additional properties on the global window object for JSCharting\r\ndeclare global {\r\n  interface Window {\r\n    JSC?: {\r\n      Chart: (element: HTMLElement, config: any) => void;\r\n    };\r\n  }\r\n}\r\n\r\n// Define interfaces for data points and component props\r\ninterface DataPoint {\r\n  name: string;\r\n  points: [string, number][];\r\n}\r\n\r\ninterface PopulationPyramidChartProps {\r\n  width?: string;\r\n  height?: string;\r\n  apiUrl: string;\r\n  year: string;\r\n}\r\n\r\n// Define the PopulationPyramidChart component\r\nconst PopulationPyramidChart: React.FC<PopulationPyramidChartProps> = ({ width = '100%', height = '100%', apiUrl, year }) => {\r\n  // Ref to hold reference to the chart container element\r\n  const chartRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Fetch data from the provided API URL on component mount or when apiUrl changes\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Fetch data from the provided API URL\r\n        const response = await fetch(apiUrl);\r\n\r\n        // Check if the response is ok\r\n        if (!response.ok) {\r\n          throw new Error('Error fetching data from IBGE API');\r\n        }\r\n\r\n        // Parse response data\r\n        const data = await response.json();\r\n        const processedData = data[0].resultados;\r\n\r\n        // Variables to hold data for chart\r\n        const maleData: [string, number][] = [];\r\n        const femaleData: [string, number][] = [];\r\n\r\n        // Determine codes for sex and age group based on selected year\r\n        var sexCode = 0;\r\n        var ageGroupCode = 0;\r\n        if (year === '2022') {\r\n          sexCode = 2;\r\n          ageGroupCode = 287;\r\n        } else if (year === '2010') {\r\n          sexCode = 2;\r\n          ageGroupCode = 58;\r\n        }\r\n\r\n        // Process retrieved data\r\n        for (let i = 0; i < processedData.length; i++) {\r\n          var sex = '';\r\n          var ageGroup = '';\r\n\r\n          // Extract sex and age group information from the data\r\n          for (let j = 0; j < processedData[i].classificacoes.length; j++) {\r\n            if (processedData[i].classificacoes[j].id == sexCode) {\r\n              const sexValue = processedData[i].classificacoes[j].categoria;\r\n              sex = Object.values(sexValue)[0];\r\n            }\r\n            if (processedData[i].classificacoes[j].id == ageGroupCode) {\r\n              const ageGroupValue = processedData[i].classificacoes[j].categoria;\r\n              ageGroup = Object.values(ageGroupValue)[0];\r\n            }\r\n          }\r\n\r\n          // Extract quantity information\r\n          const quantityValue = processedData[i].series[0].serie;\r\n          const quantityKey = Object.keys(quantityValue)[0];\r\n          var quantity = parseInt(quantityValue[quantityKey], 10);\r\n\r\n          // Determine if the data belongs to males or females and push to respective arrays\r\n          if (sex === 'Homens') {\r\n            maleData.push([ageGroup, -quantity]);\r\n          }\r\n          if (sex === 'Mulheres') {\r\n            femaleData.push([ageGroup, quantity]);\r\n          }\r\n        }\r\n\r\n        // Create data points for males and females\r\n        const malePoints: DataPoint = {\r\n          name: 'Male',\r\n          points: maleData,\r\n        };\r\n\r\n        const femalePoints: DataPoint = {\r\n          name: 'Female',\r\n          points: femaleData,\r\n        };\r\n\r\n        // Render chart using JSCharting library\r\n        if (window.JSC) {\r\n          renderChart(malePoints, femalePoints);\r\n        } else {\r\n          // Load JSCharting library if not already loaded\r\n          const script = document.createElement('script');\r\n          script.src = 'https://code.jscharting.com/latest/jscharting.js';\r\n          script.async = true;\r\n          script.onload = () => renderChart(malePoints, femalePoints);\r\n          document.head.appendChild(script);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n      }\r\n    };\r\n\r\n    // Call fetchData function on component mount or when apiUrl changes\r\n    fetchData();\r\n  }, [apiUrl]);\r\n\r\n  // Function to render the population pyramid chart\r\n  const renderChart = (malePoints: DataPoint, femalePoints: DataPoint) => {\r\n    // Reverse data points to display correctly on the chart\r\n    malePoints.points.reverse();\r\n    femalePoints.points.reverse();\r\n\r\n    // Configuration object for the chart\r\n    const config = {\r\n      debug: true,\r\n      type: 'horizontal column',\r\n      title_label_text: '',\r\n      yAxis: {\r\n        scale_type: 'stacked',\r\n        defaultTick_label_text: '{Math.abs(%Value):a2}',\r\n      },\r\n      xAxis: { label_text: 'Age', crosshair_enabled: true },\r\n      defaultTooltip_label_text: 'Ages %xValue:<br><b>%points</b>',\r\n      defaultPoint_tooltip: '%icon {Math.abs(%Value)}',\r\n      legend_template: '%name %icon {Math.abs(%Value)}',\r\n      series: [malePoints, femalePoints],\r\n    };\r\n\r\n    // Render the chart using JSCharting library\r\n    if (window.JSC && typeof window.JSC.Chart === 'function') {\r\n      // Check if chartRef.current is not null before calling the Chart function\r\n      if (chartRef.current) {\r\n        window.JSC.Chart(chartRef.current, config);\r\n      } else {\r\n        console.error('chartRef.current is null.');\r\n      }\r\n    } else {\r\n      console.error('JSCharting.Chart is either not defined or not a function.');\r\n    }\r\n  };\r\n\r\n  // Render the chart container\r\n  return <div ref={chartRef} style={{ width, height }}></div>;\r\n};\r\n\r\n// Export the PopulationPyramidChart component\r\nexport default PopulationPyramidChart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}